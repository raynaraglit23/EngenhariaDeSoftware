name: CD - Continuous Deployment

on:
  push:
    branches: [ main ]
  workflow_run:
    workflows: ["CI - Continuous Integration"]
    types:
      - completed
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/clima-app

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event.workflow_run.conclusion == 'success')
    environment: production

    steps:
    - name: Checkout c√≥digo
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Instalar depend√™ncias
      run: npm ci

    - name: Build da aplica√ß√£o
      run: npm run build

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login no Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Debug - Verificar vari√°veis
      run: |
        echo "üîç Debug: Verificando vari√°veis de ambiente"
        echo "REGISTRY: ${{ env.REGISTRY }}"
        echo "IMAGE_NAME: ${{ env.IMAGE_NAME }}"
        echo "DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}"
        echo "GITHUB_REF: ${{ github.ref }}"
        echo "GITHUB_SHA: ${{ github.sha }}"

    - name: Extrair metadados
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix=sha-

    - name: Debug - Verificar tags geradas
      run: |
        echo "üîç Debug: Tags geradas pelo metadata-action"
        echo "Tags: ${{ steps.meta.outputs.tags }}"
        echo "Labels: ${{ steps.meta.outputs.labels }}"

    - name: Build e push da imagem Docker
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Deploy para Render (exemplo)
    - name: Deploy para Render
      if: vars.DEPLOY_TARGET == 'render'
      run: |
        echo "üöÄ Iniciando deploy para Render..."
        # Render detecta automaticamente mudan√ßas no reposit√≥rio
        # e faz deploy baseado no Dockerfile
        echo "‚úÖ Deploy iniciado no Render"
        echo "üìã Build ID: ${{ github.run_id }}"
        echo "üîó Commit: ${{ github.sha }}"
        echo "üë§ Autor: ${{ github.actor }}"

    # Deploy para Vercel
    - name: Deploy para Vercel
      if: vars.DEPLOY_TARGET == 'vercel'
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'

    # Deploy para Netlify
    - name: Deploy para Netlify
      if: vars.DEPLOY_TARGET == 'netlify'
      uses: nwtgck/actions-netlify@v3.0
      with:
        publish-dir: './dist'
        production-branch: main
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Deploy from GitHub Actions - Build #${{ github.run_number }}"
        enable-pull-request-comment: false
        enable-commit-comment: true
        overwrites-pull-request-comment: true
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

    # Deploy para servidor pr√≥prio via SSH
    - name: Deploy para Servidor Pr√≥prio
      if: vars.DEPLOY_TARGET == 'server'
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          echo "üöÄ Iniciando deploy no servidor..."
          cd /path/to/your/app
          docker pull ${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker-compose down
          docker-compose up -d
          echo "‚úÖ Deploy conclu√≠do no servidor"

    # Deploy para Railway
    - name: Deploy para Railway
      if: vars.DEPLOY_TARGET == 'railway'
      run: |
        echo "üöÄ Iniciando deploy para Railway..."
        # Railway detecta automaticamente mudan√ßas no reposit√≥rio
        echo "‚úÖ Deploy iniciado no Railway"
        echo "üìã Build ID: ${{ github.run_id }}"

    # Notifica√ß√µes de sucesso
    - name: Notificar sucesso do deploy
      if: success()
      run: |
        echo "‚úÖ Deploy realizado com sucesso!"
        echo "üìã Build ID: ${{ github.run_id }}"
        echo "üîó Commit: ${{ github.sha }}"
        echo "üë§ Autor: ${{ github.actor }}"
        echo "üìÖ Data: $(date)"
        echo "üê≥ Imagem Docker: ${{ env.IMAGE_NAME }}:${{ github.sha }}"
        
        # Aqui voc√™ pode adicionar notifica√ß√µes (Slack, Discord, etc.)
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"‚úÖ Deploy realizado com sucesso! Build #${{ github.run_number }}"}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}

    # Notifica√ß√µes de falha
    - name: Notificar falha no deploy
      if: failure()
      run: |
        echo "‚ùå Falha no deploy!"
        echo "üìã Build ID: ${{ github.run_id }}"
        echo "üîó Commit: ${{ github.sha }}"
        echo "üë§ Autor: ${{ github.actor }}"
        echo "üìÖ Data: $(date)"
        
        # Aqui voc√™ pode adicionar notifica√ß√µes de falha
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"‚ùå Falha no deploy! Build #${{ github.run_number }}"}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}