name: CD - Continuous Deployment

on:
  push:
    branches: [ main ]
  workflow_run:
    workflows: ["CI - Continuous Integration"]
    types:
      - completed
    branches: [ main ]

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event.workflow_run.conclusion == 'success'
    environment: staging

    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Deploy para Staging
      run: |
        echo "Deploying to staging environment..."
        # Aqui você adicionaria os comandos específicos para deploy em staging
        # Exemplo com Docker Compose, SSH, ou outros serviços

  deploy-production:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event.workflow_run.conclusion == 'success')
    environment: production

    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Login no Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Deploy para Produção
      run: |
        echo "Deploying to production environment..."
        # Exemplo de deploy com Docker
        # docker pull ${{ secrets.DOCKER_USERNAME }}/react-app:main
        # docker stop react-app-prod || true
        # docker rm react-app-prod || true
        # docker run -d --name react-app-prod -p 80:80 ${{ secrets.DOCKER_USERNAME }}/react-app:main

    # Exemplo de deploy para Vercel
    - name: Deploy para Vercel
      if: vars.DEPLOY_TARGET == 'vercel'
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'

    # Exemplo de deploy para Netlify
    - name: Deploy para Netlify
      if: vars.DEPLOY_TARGET == 'netlify'
      uses: nwtgck/actions-netlify@v3.0
      with:
        publish-dir: './dist'
        production-branch: main
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Deploy from GitHub Actions"
        enable-pull-request-comment: false
        enable-commit-comment: true
        overwrites-pull-request-comment: true
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

    # Exemplo de deploy para servidor próprio via SSH
    - name: Deploy para Servidor Próprio
      if: vars.DEPLOY_TARGET == 'server'
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          cd /path/to/your/app
          docker pull ${{ secrets.DOCKER_USERNAME }}/react-app:main
          docker-compose down
          docker-compose up -d

    - name: Notificar sucesso do deploy
      if: success()
      run: |
        echo "✅ Deploy realizado com sucesso!"
        # Aqui você pode adicionar notificações (Slack, Discord, etc.)

    - name: Notificar falha no deploy
      if: failure()
      run: |
        echo "❌ Falha no deploy!"
        # Aqui você pode adicionar notificações de falha